<?php

/**
 * @file
 *
 * Maintains an entity that appears as panel pane content.
 */

// -------------------------------------------------------------------------
// Drupal core hooks

/**
 * Implements hook_entity_info()
 */
function fieldable_panels_panes_entity_info() {
  return array(
    'fieldable_panels_pane' => array(
      'label' => t('Panels Pane'),
      'controller class' => 'PanelsPaneController',
      'base table' => 'fieldable_panels_panes',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'fpid',
        'bundle' => 'bundle',
        'label' => 'admin_title',
      ),
      'bundles' => array(
        // @todo We need to store the possible bundles and create a UI.
        // to allow for more bundles. For now, hook_panels_panes_entity_info_alter
        // will work.
        'fieldable_panels_pane' => array(
          'label' => t('Panels pane'),
          'admin' => array(
            'path' => 'admin/structure/panels/entity/manage/%fieldable_panels_panes_type',
            'bundle argument' => 5,
            'real path' => 'admin/structure/panels/entity/manage/fieldable-panels-pane',
            'access arguments' => array('administer fieldable panels panes'),
          ),
        ),
      ),
      'view modes' => array(
        // @todo we should support view modes.
        'full' => array(
          'label'  => t('Full'),
          'custom settings' => FALSE,
        ),
      ),

      // entity module callbacks
      'view callback' => 'entity_metadata_view_single',
      'creation callback' => 'fieldable_panels_pane_create',
    ),
  );
}

/**
 * Implements hook_menu()
 */
function fieldable_panels_panes_menu() {
  $items = array();

  $base = array(
    'access arguments' => array('administer fieldable panels panes'),
    'file' => 'includes/admin.inc',
  );


  $items['admin/structure/panels/entity'] = array(
    'title' => 'Entities',
    'description' => 'Manage pane content types.',
    'page callback' => 'fieldable_panels_panes_entities_page',
    'type' => MENU_LOCAL_TASK,
  ) + $base;

  $items['admin/structure/panels/entity/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  $items['admin/structure/panels/entity/view/%fieldable_panels_panes'] = array(
    'title callback' => 'fieldable_panels_panes_entity_title',
    'title arguments' => array(5),
    'page callback' => 'fieldable_panels_panes_entity_view_page',
    'page arguments' => array(5),
    'access callback' => 'fieldable_panels_panes_entity_access',
    'access arguments' => array(5),
  ) + $base;

  $items['admin/structure/panels/entity/view/%fieldable_panels_panes/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ) + $base;

  $items['admin/structure/panels/entity/view/%fieldable_panels_panes/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'fieldable_panels_panes_entity_edit_page',
    'page arguments' => array(5),
    'access callback' => 'fieldable_panels_panes_entity_access',
    'access arguments' => array(5),
    'weight' => -8,
  ) + $base;

  $items['admin/structure/panels/entity/view/%fieldable_panels_panes/delete'] = array(
    'title' => 'delete',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fieldable_panels_panes_entity_delete_form', 5),
    'access callback' => 'fieldable_panels_panes_entity_access',
    'access arguments' => array(5),
    'weight' => -8,
  ) + $base;

  $items['admin/structure/panels/entity/manage/%fieldable_panels_panes_type'] = array(
    'title callback' => 'fieldable_panels_panes_entities_title',
    'title arguments' => array(5),
    'page callback' => 'fieldable_panels_panes_entities_list_page',
    'page arguments' => array(5),
  ) + $base;

  $items['admin/structure/panels/entity/manage/%fieldable_panels_panes_type/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/structure/panels/entity/manage/%fieldable_panels_panes_type/add'] = array(
    'title' => 'Add',
    'page callback' => 'fieldable_panels_panes_entities_add_page',
    'page arguments' => array(5),
    'type' => MENU_LOCAL_TASK,
  ) + $base;

  return $items;
}

/**
 * Implements hook_permission()
 */
function hook_permission() {
  return array(
    'administer fieldable panels panes' => array(
      'title' => t('Administer fieldable panels panes'),
      'description' => t('Allows users to create and manage fieldable panel pane entities.'),
    ),
  );
}

/**
 * Implements hook_theme()
 */
function fieldable_panels_panes_theme() {
  return array(
    'fieldable_panels_pane' => array(
      'render element' => 'elements',
      'variable'  => array(
        'element'  => null,
      ),
      'template'  => 'fieldable-panels-pane',
    ),
  );
}

// -------------------------------------------------------------------------
// Menu callbacks for things like titles, access control, etc.

/**
 * Properly format the type from the URL version to the internal version.
 */
function fieldable_panels_panes_type_load($type) {
  $type = str_replace('-', '_', $type);
  $entity_info = entity_get_info('fieldable_panels_pane');

  if (isset($entity_info['bundles'][$type])) {
    return $type;
  }
}

/**
 * Provide a safe title for an entity pane type based upon the URL.
 */
function fieldable_panels_panes_entities_title($type) {
  $type = str_replace('-', '_', $type);
  $entity_info = entity_get_info('fieldable_panels_pane');

  if (isset($entity_info['bundles'][$type])) {
    return $entity_info['bundles'][$type]['label'];
  }
}

/**
 * Ensure an entity can be accessed via URL.
 *
 * This requires only administrative access.
 */
function fieldable_panels_panes_entity_access($entity) {
  return $entity && user_access('administer fieldable panels panes');
}

/**
 * Provide a safe title for an entity from the entity.
 */
function fieldable_panels_panes_entity_title($entity) {
  if (!empty($entity->admin_title)) {
    return $entity->admin_title;
  }

  if (!empty($entity->title)) {
    return $entity->title;
  }

  return t('No title');
}

// -------------------------------------------------------------------------
// CTools hooks

/**
 * Implements hook_ctools_plugin_directory()
 */
function fieldable_panels_panes_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner = 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

// -------------------------------------------------------------------------
// CTools hooks

/**
 * Implements hook_views_api
 */
function fieldable_panels_panes_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'fieldable_panels_panes') . '/plugins/views',
  );
}

// -------------------------------------------------------------------------
// Theming

/**
 * Preprocess function for fieldable-panels-pane.tpl.php
 */
function fieldable_panels_panes_preprocess_fieldable_panels_pane(&$vars) {
  $vars += array('content' => array());
  foreach (element_children($vars['elements']) as $key) {
    $vars['content'][$key] = $vars['elements'][$key];
  }

  // Make the field variables available with the appropriate language.
  field_attach_preprocess('fieldable_panels_pane', $vars['elements']['#element'], $vars['content'], $vars);

  $vars['fields'] = '';
  foreach($vars['content'] as $content) {
    $vars['fields'] .= render($content);
  }
}

// -------------------------------------------------------------------------
// Database and general entity API functions

/**
 * Panel pane entity loader.
 *
 * @see entity_load().
 */
function fieldable_panels_panes_load($fpid) {
  if (!is_numeric($fpid)) {
    return FALSE;
  }

  $entities = fieldable_panels_panes_load_multiple(array($fpid));
  return array_pop($entities);
}

/**
 * Load multiple fieldable panel panes.
 *
 * @see entity_load_multiple().
 */
function fieldable_panels_panes_load_multiple($ids, $conditions = array(), $reset = FALSE) {
  return entity_load('fieldable_panels_pane', $ids, $conditions, $reset);
}

/**
 * Save a fieldable panel pane.
 *
 * @see node_save()
 */
function fieldable_panels_panes_save($entity) {
  return entity_get_controller('fieldable_panels_pane')->save($entity);
}

/**
 * Delete a fieldable panel pane.
 *
 * @param $fpid
 *   A fieldable panel pane ID.
 */
function fieldable_panels_panes_delete($fpid) {
  fieldable_panels_panes_delete_multiple(array($fpid));
}

/**
 * Delete multiple fieldable panel panes.
 *
 * @param $fpids
 *   An array of fieldable panel pane IDs.
 */
function fieldable_panels_panes_delete_multiple($fpids) {
  return entity_get_controller('fieldable_panels_pane')->delete($fpids);
}

/**
 * View a fieldable panel pane.
 *
 * @see node_view()
 */
function fieldable_panels_pane_view($entity, $view_mode = 'full', $langcode = NULL) {
  return entity_get_controller('fieldable_panels_pane')->view($entity, $view_mode, $langcode);
}

/**
 * Callback to create a new entity.
 */
function fieldable_panels_pane_create($values = array()) {
  $entity = (object) array(
    'bundle' => $values['bundle'],
    'language' => LANGUAGE_NONE,
    'is_new' => TRUE,
  );

  // Ensure basic fields are defined.
  $values += array(
    'bundle' => 'fieldable_panels_pane',
    'title' => '',
    'reusable' => FALSE,
    'admin_title' => '',
    'admin_description' => '',
    'category' => '',
  );

  // Apply the given values.
  foreach ($values as $key => $value) {
    $entity->$key = $value;
  }

  return $entity;
}

/**
 * Get the safe human readable name of an entity bundle.
 */
function fieldable_panels_pane_get_bundle_label($bundle) {
  $entity_info = entity_get_info('fieldable_panels_pane');
  if (empty($entity_info['bundles'][$bundle]['label'])) {
    $output = t('Unknown content type');
  }

  return $entity_info['bundles'][$bundle]['label'];
}

/**
 * Get an array of entity bundle names, suitable for an options form.
 */
function fieldable_panels_pane_get_bundle_labels() {
  $bundles = array();
  $entity_info = entity_get_info('fieldable_panels_pane');

  foreach ($entity_info['bundles'] as $bundle => $info) {
    $bundles[$bundle] = $info['label'];
  }

  asort($bundles);

  return $bundles;
}

/**
 * Basic edit form for the pane entity.
 *
 * The entity being edited should be stored in $form_state['entity']
 * when this form is built.
 */
function fieldable_panels_panes_entity_edit_form($form, &$form_state) {
  $entity = $form_state['entity'];

  // fixes a bug in wysiwyg
  // oh wysiwyg. We need a better way to address this.
//  drupal_add_css('sites/all/libraries/ckeditor/skins/kama/editor.css');

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $entity->title,
    '#weight' => -10,
  );

  // Make the other form items dependent upon it.
  ctools_include('dependent');
  ctools_add_js('dependent');

  $form['reusable'] = array(
    '#weight' => 10,
  );

  $form['reusable']['reusable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Make this entity reusable'),
    '#default_value' => $entity->reusable,
    '#id' => 'edit-reusable',
  );

  $form['reusable']['category'] = array(
    '#type' => 'textfield',
    '#title' => t('Category'),
    '#description' => t('The category this content will appear in the "Add content" modal. If left blank the category will be "Miscellaneous".'),
    '#dependency' => array('edit-reusable' => array(1)),
    '#default_value' => $entity->category,
  );

  $form['reusable']['admin_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Administrative title'),
    '#title' => t('The name this content will appear in the "Add content" modal.'),
    '#dependency' => array('edit-reusable' => array(1)),
    '#default_value' => $entity->admin_title,
  );

  $form['reusable']['admin_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Administrative description'),
    '#description' => t('A description of what this content is, does or is for, for administrative use.'),
    '#dependency' => array('edit-reusable' => array(1)),
    '#default_value' => $entity->admin_description,
  );

  field_attach_form('fieldable_panels_pane', $entity, $form, $form_state);

  if (!empty($form_state['add submit'])) {
    $form['actions'] = array(
      '#type' => 'actions',
    );

    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
    );
  }

  return $form;
}

/**
 * Validate callback for the pane entity.
 */
function fieldable_panels_panes_entity_edit_form_validate($form, &$form_state) {
  field_attach_form_validate('fieldable_panels_pane', $form_state['entity'], $form, $form_state);
}

/**
 * Submit callback for the pane entity.
 */
function fieldable_panels_panes_entity_edit_form_submit($form, &$form_state) {
  $entity = $form_state['entity'];

  // Copy hardcoded fields.
  $entity->title = $form_state['values']['title'];
  $entity->reusable = $form_state['values']['reusable'];
  $entity->category = $form_state['values']['category'];
  $entity->admin_title = $form_state['values']['admin_title'];
  $entity->admin_description = $form_state['values']['admin_description'];

  field_attach_submit('fieldable_panels_pane', $entity, $form, $form_state);

  fieldable_panels_panes_save($entity);
  if (!empty($form_state['add submit'])) {
    drupal_set_message(t('The entity has been saved.'));
  }
}
